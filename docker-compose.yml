version: '3.8'

services:
  # OMOP Quality Dashboard Application
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        - PYTHON_VERSION=3.11
        - BUILD_DATE=${BUILD_DATE:-2024-01-01}
        - VCS_REF=${VCS_REF:-main}
        - VERSION=${VERSION:-1.0.0}
    container_name: omop-quality-dashboard
    ports:
      - "${DASHBOARD_PORT:-8501}:8501"
    environment:
      # Database configuration
      - OMOP_DB_TYPE=${OMOP_DB_TYPE:-postgresql}
      - OMOP_DB_HOST=${OMOP_DB_HOST:-postgres}
      - OMOP_DB_PORT=${OMOP_DB_PORT:-5432}
      - OMOP_DB_NAME=${OMOP_DB_NAME:-omop_cdm}
      - OMOP_DB_USER=${OMOP_DB_USER:-omop_user}
      - OMOP_DB_PASSWORD=${OMOP_DB_PASSWORD:-omop_password}
      
      # Dashboard configuration
      - DASHBOARD_HOST=0.0.0.0
      - DASHBOARD_PORT=8501
      - DASHBOARD_TITLE=${DASHBOARD_TITLE:-OMOP Quality Dashboard}
      - DASHBOARD_DEBUG=${DASHBOARD_DEBUG:-false}
      
      # Application settings
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_CACHING=${ENABLE_CACHING:-true}
      
      # Security
      - SECRET_KEY=${SECRET_KEY:-change_this_in_production}
    
    volumes:
      # Persist logs
      - omop_logs:/app/logs
      # Persist exports
      - omop_exports:/app/exports
      # Mount configuration if you want to override
      - ./config.yaml:/app/config.yaml:ro
      # Optional: Mount custom configuration directory
      - ./config:/app/config:ro
    
    depends_on:
      postgres:
        condition: service_healthy
    
    restart: unless-stopped
    
    networks:
      - omop_network
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 512M
          cpus: '0.5'

  # PostgreSQL Database (for testing/demo)
  postgres:
    image: postgres:15-alpine
    container_name: omop-postgres
    environment:
      - POSTGRES_DB=${OMOP_DB_NAME:-omop_cdm}
      - POSTGRES_USER=${OMOP_DB_USER:-omop_user}
      - POSTGRES_PASSWORD=${OMOP_DB_PASSWORD:-omop_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    ports:
      - "${OMOP_DB_PORT:-5432}:5432"
    
    volumes:
      # Persist database data
      - postgres_data:/var/lib/postgresql/data
      # Mount initialization scripts if they exist
      - ./sql/init:/docker-entrypoint-initdb.d:ro
    
    restart: unless-stopped
    
    networks:
      - omop_network
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${OMOP_DB_USER:-omop_user} -d ${OMOP_DB_NAME:-omop_cdm}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: omop-redis
    ports:
      - "6379:6379"
    
    volumes:
      - redis_data:/data
    
    restart: unless-stopped
    
    networks:
      - omop_network
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    
    # Enable persistence
    command: redis-server --appendonly yes
    
    profiles:
      - with-cache

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: omop-nginx
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    
    depends_on:
      - dashboard
    
    restart: unless-stopped
    
    networks:
      - omop_network
    
    profiles:
      - with-proxy

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
    name: omop_postgres_data
  redis_data:
    driver: local
    name: omop_redis_data
  omop_logs:
    driver: local
    name: omop_dashboard_logs
  omop_exports:
    driver: local
    name: omop_dashboard_exports
  nginx_logs:
    driver: local
    name: omop_nginx_logs

# Custom network
networks:
  omop_network:
    driver: bridge
    name: omop_quality_network
    ipam:
      config:
        - subnet: 172.20.0.0/16
