version: '3.8'

services:
  # OMOP Quality Dashboard Application
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=3.11
    container_name: omop-quality-dashboard
    ports:
      - "${DASHBOARD_PORT:-8501}:8501"
    environment:
      # Database configuration
      - OMOP_DB_TYPE=${OMOP_DB_TYPE:-postgresql}
      - OMOP_DB_HOST=${OMOP_DB_HOST:-postgres}
      - OMOP_DB_PORT=${OMOP_DB_PORT:-5432}
      - OMOP_DB_NAME=${OMOP_DB_NAME:-omop_cdm}
      - OMOP_DB_USER=${OMOP_DB_USER:-omop_user}
      - OMOP_DB_PASSWORD=${OMOP_DB_PASSWORD:-omop_password}
      
      # Dashboard configuration
      - DASHBOARD_HOST=0.0.0.0
      - DASHBOARD_PORT=8501
      - DASHBOARD_TITLE=${DASHBOARD_TITLE:-OMOP Quality Dashboard}
      - DASHBOARD_DEBUG=${DASHBOARD_DEBUG:-false}
      
      # Application settings
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_CACHING=${ENABLE_CACHING:-true}
      
      # Security
      - SECRET_KEY=${SECRET_KEY:-change_this_in_production}
    
    volumes:
      # Persist logs
      - ./logs:/app/logs
      # Persist exports
      - ./exports:/app/exports
      # Mount configuration if you want to override
      - ./config.yaml:/app/config.yaml:ro
      # Optional: Mount custom rules
      - ./config:/app/config:ro
    
    depends_on:
      postgres:
        condition: service_healthy
    
    restart: unless-stopped
    
    networks:
      - omop_network
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 512M
          cpus: '0.5'

  # PostgreSQL Database (for testing/demo)
  postgres:
    image: postgres:15-alpine
    container_name: omop-postgres
    environment:
      - POSTGRES_DB=${OMOP_DB_NAME:-omop_cdm}
      - POSTGRES_USER=${OMOP_DB_USER:-omop_user}
      - POSTGRES_PASSWORD=${OMOP_DB_PASSWORD:-omop_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    ports:
      - "${OMOP_DB_PORT:-5432}:5432"
    
    volumes:
      # Persist database data
      - postgres_data:/var/lib/postgresql/data
      # Mount initialization scripts
      - ./sql/init:/docker-entrypoint-initdb.d:ro
      # Mount sample data (optional)
      - ./sql/sample_data:/sample_data:ro
    
    restart: unless-stopped
    
    networks:
      - omop_network
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${OMOP_DB_USER:-omop_user} -d ${OMOP_DB_NAME:-omop_cdm}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: omop-redis
    ports:
      - "6379:6379"
    
    volumes:
      - redis_data:/data
    
    restart: unless-stopped
    
    networks:
      - omop_network
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    
    # Enable persistence
    command: redis-server --appendonly yes

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: omop-nginx
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    
    depends_on:
      - dashboard
    
    restart: unless-stopped
    
    networks:
      - omop_network
    
    profiles:
      - with-proxy

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: omop-prometheus
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    restart: unless-stopped
    
    networks:
      - omop_network
    
    profiles:
      - with-monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: omop-grafana
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    depends_on:
      - prometheus
    
    restart: unless-stopped
    
    networks:
      - omop_network
    
    profiles:
      - with-monitoring

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network
networks:
  omop_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

---

# docker-compose.override.yml
# Development overrides (automatically loaded)

version: '3.8'

services:
  dashboard:
    # Development settings
    environment:
      - DASHBOARD_DEBUG=true
      - DEV_MODE=true
      - LOG_LEVEL=DEBUG
    
    # Mount source code for development
    volumes:
      - ./app:/app/app:ro
      - ./tests:/app/tests:ro
      - ./config.yaml:/app/config.yaml
    
    # Enable hot reload
    command: >
      python run_dashboard.py 
      --debug 
      --host 0.0.0.0

  postgres:
    # Development settings
    environment:
      - POSTGRES_DB=omop_cdm_dev
    
    # Expose port for external access
    ports:
      - "5432:5432"

---

# docker-compose.prod.yml
# Production configuration

version: '3.8'

services:
  dashboard:
    # Production settings
    environment:
      - ENVIRONMENT=production
      - DASHBOARD_DEBUG=false
      - LOG_LEVEL=WARNING
      - ENABLE_METRICS=true
    
    # Security: run as non-root user
    user: "1001:1001"
    
    # Read-only root filesystem
    read_only: true
    
    # Temporary filesystems for writable directories
    tmpfs:
      - /tmp
      - /app/logs
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '4'
        reservations:
          memory: 1G
          cpus: '1'

  postgres:
    # Production database settings
    environment:
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
      - POSTGRES_MAX_CONNECTIONS=200
    
    # Performance tuning
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    
    # Security: run as postgres user
    user: postgres
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'

---

# .dockerignore
# Files to exclude from Docker build context

# Git
.git
.gitignore

# Python
__pycache__
*.pyc
*.pyo
*.pyd
.Python
*.so
.tox
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.log
.pytest_cache/

# Environments
.env
.env.*
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Project specific
logs/
exports/
backups/
data/
htmlcov/
.pytest_cache/
*.db
*.sqlite
*.sqlite3

# Documentation
docs/_build/
README.md
CHANGELOG.md

# Docker
Dockerfile
docker-compose*.yml
.dockerignore

# CI/CD
.github/
.gitlab-ci.yml
.travis.yml

# Testing
tests/
conftest.py
pytest.ini
.coverage
