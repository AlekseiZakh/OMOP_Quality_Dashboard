# Multi-stage Docker build for OMOP Quality Dashboard

# Build argument for Python version
ARG PYTHON_VERSION=3.11

# =============================================================================
# Stage 1: Build dependencies and compile Python packages
# =============================================================================
FROM python:${PYTHON_VERSION}-slim as builder

# Build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.0

# Labels for image metadata
LABEL maintainer="OMOP Quality Dashboard Team"
LABEL org.label-schema.build-date=$BUILD_DATE
LABEL org.label-schema.vcs-ref=$VCS_REF
LABEL org.label-schema.version=$VERSION
LABEL org.label-schema.name="OMOP Quality Dashboard"
LABEL org.label-schema.description="Comprehensive data quality monitoring for OMOP CDM"
LABEL org.label-schema.schema-version="1.0"

# Set build environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies for building
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    libpq-dev \
    libssl-dev \
    libffi-dev \
    unixodbc-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install wheel
RUN pip install --upgrade pip setuptools wheel

# Copy requirements file
COPY requirements.txt /tmp/requirements.txt

# Install Python dependencies
RUN pip install --no-cache-dir -r /tmp/requirements.txt

# =============================================================================
# Stage 2: Runtime image
# =============================================================================
FROM python:${PYTHON_VERSION}-slim as runtime

# Runtime environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/opt/venv/bin:$PATH" \
    STREAMLIT_SERVER_PORT=8501 \
    STREAMLIT_SERVER_ADDRESS=0.0.0.0 \
    STREAMLIT_SERVER_HEADLESS=true \
    STREAMLIT_SERVER_ENABLE_CORS=false \
    STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=false

# Install runtime system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    unixodbc \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r omop && useradd -r -g omop -u 1001 omop

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Set working directory
WORKDIR /app

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/exports /app/data /app/config \
    && chown -R omop:omop /app

# Copy application files
COPY --chown=omop:omop app/ ./app/
COPY --chown=omop:omop config.yaml ./
COPY --chown=omop:omop run_dashboard.py ./
COPY --chown=omop:omop .env.example ./

# Copy additional configuration files if they exist
COPY --chown=omop:omop config/ ./config/ 2>/dev/null || :

# Create health check script
RUN echo '#!/bin/bash\ncurl -f http://localhost:8501/_stcore/health || exit 1' > /app/healthcheck.sh \
    && chmod +x /app/healthcheck.sh \
    && chown omop:omop /app/healthcheck.sh

# Switch to non-root user
USER omop

# Expose the application port
EXPOSE 8501

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD ["/app/healthcheck.sh"]

# Default command
CMD ["python", "run_dashboard.py", "--host", "0.0.0.0", "--no-browser"]

# =============================================================================
# Stage 3: Development image (optional)
# =============================================================================
FROM runtime as development

# Switch back to root for installing dev dependencies
USER root

# Install development tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    vim \
    htop \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
RUN pip install --no-cache-dir \
    pytest \
    pytest-cov \
    black \
    flake8 \
    mypy \
    jupyter

# Create development directories
RUN mkdir -p /app/tests /app/notebooks \
    && chown -R omop:omop /app

# Switch back to omop user
USER omop

# Development command with auto-reload
CMD ["python", "run_dashboard.py", "--debug", "--host", "0.0.0.0", "--no-browser"]

# =============================================================================
# Build hooks and metadata
# =============================================================================

# Build-time metadata as defined at http://label-schema.org
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

LABEL org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="OMOP Quality Dashboard" \
      org.label-schema.description="Comprehensive data quality monitoring dashboard for OMOP Common Data Model" \
      org.label-schema.url="https://github.com/your-org/omop-quality-dashboard" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/your-org/omop-quality-dashboard" \
      org.label-schema.vendor="Your Organization" \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0"
